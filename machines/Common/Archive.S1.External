#!/usr/bin/env sh
# @(#) bin/Archive.S1.External -> 0/Scene/1/db0/machines/Common/
# Last-edited: 2022.05.15.1106.Sun -- Danny Quah (me@DannyQuah.com)
# ----------------------------------------------------------------
# -l archives lbook into WD-My-Passport-Ultra-2Tb-2016.07 (use WSL, not MSYS)
# -[n|a] no-op, just list OR action
# -p archives pbook into Samsung-1TB-HD-2015.12.md (retired)
#
#    On lbook if /mnt/e not already mounted or available, first unlock
#    BitLocker-protected external drive onto E:, then open WSL:
#    sudo mkdir -p /mnt/e  
#    sudo mount -t drvfs -o uid=1000,gid=1000 e: /mnt/e
#    (afterwards sudo umount /mnt/e)
#
# Revision History:
#  % 2022.02.20.1530.Sun -- Danny Quah (me@DannyQuah.com) 
#    Refactor and extend
#  % Wed 2021.02.10.2039 -- Danny Quah (me@DannyQuah.com)
#    On lbook if /mnt/e not already mounted or available, first unlock
#    BitLocker-protected external drive onto E:, then open WSL:
#    sudo mkdir /mnt/e  
#    sudo mount -t drvfs -o uid=1000,gid=1000 e: /mnt/e
#  % Tue 2020.10.27.1004 -- Danny Quah (me@DannyQuah.com)
#    First draft: Backup onto External HD; try to do so regularly
# ----------------------------------------------------------------
trap 'exit 0' 2 15 
USAGE_MESSAGE="Usage: `basename $0` {-b|-r} {-l|-p} {-n|-a}"
LIST_FOLDERS="0/ 1/"
RSYNC_FLAGS='-LavrulhRHpEXgt --exclude .git/ --delete --progress'
#
if [ $# -le 0 ] ; then
  echo $USAGE_MESSAGE
  exit 1
fi

# ----------------------------------------------------------------
bBackup=0
bRestore=0
if [ "$1" = "-b" ]; then
  bBackup=1
elif [ $1 = '-r' ]; then
  bRestore=1
else
  echo "Invalid flag $1 // Unrecognized backup option"
  echo $USAGE_MESSGE
  exit 1
fi

blbook=0
bpbook=0
if [ "$2" = "-l" ]; then
  blbook=1
elif [ "$2" = "-p" ]; then
  bpbook=1
else
  echo "Invalid flag $2 // Unrecognized machine option"
  echo $USAGE_MESSAGE
  exit 1
fi

#  In principle -b|-r could be folded into this but cleaner
#  to keep no-op inspection separate
bAction=0
if [ "$3" = "-n" ]; then
  # no-op, keep bAction unchanged
  bAction=0
elif [ "$3" = "-a" ]; then
  bAction=1
else
  echo "Invalid flag $3 // Unrecognized action option"
  echo $USAGE_MESSAGE
  exit 1
fi

# ----------------------------------------------------------------

# ----------------------------------------------------------------
if [ $bpbook = 1 ]; then 
  # pbook
  EXT_HD=/media/dq/DQS
  PERSONAL_FOLDER=Users/dq/
elif [ $blbook = 1 ] ; then
  # lbook
  EXT_HD=/mnt/e/dq
  PERSONAL_FOLDER=backups/
else
  # impossible to reach here, previously already tested
  echo "Invalid flag $2 // Unrecognised machine option"
  echo $USAGE_MESSAGE
  exit 1
fi
# ----------------------------------------------------------------

# ----------------------------------------------------------------
if [ $bBackup = 1 ]; then
  # backup
  cd ~
  if [ $bAction = 0 ]; then
    # no op but show what will be done
    echo Backing up check
    for thisFolder in $LIST_FOLDERS ; do
      rsync $RSYNC_FLAGS -n $thisFolder $EXT_HD/$PERSONAL_FOLDER
    done
  elif [ $bAction = 1 ] ; then
    # act
    echo Backing up
    for thisFolder in $LIST_FOLDERS ; do
      rsync $RSYNC_FLAGS $thisFolder $EXT_HD/$PERSONAL_FOLDER
    done
  else
    # impossible to reach here, previously already tested
    echo "Invalid flag $3 // Unrecognized action option"
    echo $USAGE_MESSAGE
  fi
# $bBackup = 1
# ----------------------------------------------------------------

# ----------------------------------------------------------------
elif [ $bRestore = 1 ]; then
  # restore
  cd ~
  if [ $bAction = 0 ]; then
    # no op but show what will be done
    echo Restoring check
    for thisFolder in $LIST_FOLDERS ; do
      rsync $RSYNC_FLAGS -n $EXT_HD/$PERSONAL_FOLDER $thisFolder
    done
  elif [ $bAction = 1 ] ; then
    # act
    echo Restore
    for thisFolder in $LIST_FOLDERS ; do
      rsync $RSYNC_FLAGS $EXT_HD/$PERSONAL_FOLDER $thisFolder
    done
  else
    # impossible to reach here, previously already tested
    echo "Invalid flag $3 // Unrecognized action option"
    echo $USAGE_MESSAGE
  fi
# $bRestore = 1
fi

# ----------------------------------------------------------------

# eof Archive.S1.External

